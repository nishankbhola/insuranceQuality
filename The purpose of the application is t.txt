# Vieira Insurance Quality Control System - Complete Application Documentation

## Application Overview

The **Vieira Insurance Quality Control System** is a comprehensive web-based application designed to validate and quality-check insurance quotes created by insurance brokers. The system compares manually created insurance quotes against official government and insurance industry documents to ensure accuracy, compliance, and proper risk assessment.

## Core Purpose

The primary goal is to identify discrepancies between what brokers declare in insurance quotes and what is actually documented in official records. This helps prevent:
- Insurance fraud
- Inaccurate risk assessment
- Policy cancellations due to misrepresentation
- Financial losses for insurance companies
- Compliance violations

## System Architecture

### Technology Stack
- **Backend**: Python Flask API
- **Frontend**: React.js with Tailwind CSS
- **PDF Processing**: PyMuPDF (fitz)
- **Data Extraction**: Custom regex-based extractors
- **Validation Engine**: Business rule-based comparison system
- **Report Generation**: HTML to PDF conversion

### File Structure
```
ROCKET/
‚îú‚îÄ‚îÄ backend/
‚îÇ   ‚îú‚îÄ‚îÄ app.py (main Flask application)
‚îÇ   ‚îú‚îÄ‚îÄ extractors/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ quote_extractor.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ mvr_extractor.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dash_extractor.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ application_extractor.py
‚îÇ   ‚îú‚îÄ‚îÄ validator/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ compare_engine.py
‚îÇ   ‚îî‚îÄ‚îÄ uploads/
‚îî‚îÄ‚îÄ frontend/
    ‚îú‚îÄ‚îÄ src/
    ‚îÇ   ‚îú‚îÄ‚îÄ App.js
    ‚îÇ   ‚îî‚îÄ‚îÄ components/
    ‚îÇ       ‚îú‚îÄ‚îÄ FileUpload.js
    ‚îÇ       ‚îú‚îÄ‚îÄ ValidationReport.js
    ‚îÇ       ‚îî‚îÄ‚îÄ ApplicationQC.js
    ‚îî‚îÄ‚îÄ public/
```

## Document Processing Workflow

### 1. Document Upload
- **Single Upload Interface**: Users upload multiple PDF files in one interface
- **Automatic File Detection**: System automatically identifies document types based on:
  - Filename patterns (e.g., "MVR_ON_", "DASH_", "Quote")
  - Content analysis using different extractors
- **Multi-Driver Support**: Handles multiple drivers per policy (1 Quote + N MVRs + N DASH reports)

### 2. Document Types Processed

#### A. Insurance Quote PDF
**Source**: Manually created by insurance broker
**Extracted Data**:
- Driver information (name, license number, birth date)
- License progression dates (G1, G2, G dates)
- Declared convictions and claims
- Date insured (when driver first got insurance)
- Vehicle details and coverage information
- Policy terms and premium amounts

#### B. MVR (Motor Vehicle Record) PDF
**Source**: Government-issued driving record
**Extracted Data**:
- Full name and driver's license number
- Birth date, issue date, expiry date
- License class (G, G2, G1)
- Current address
- All convictions (speeding, traffic violations, etc.)
- **Note**: Does NOT contain insurance history or claims

#### C. DASH (Driver Abstract and System History) PDF
**Source**: Insurance industry database
**Extracted Data**:
- Complete insurance policy history
- Claim history with at-fault percentages
- Policy cancellation and expiry reasons
- Insurance gaps between policies
- **Note**: Does NOT contain driving convictions

#### D. Application PDF (New Feature)
**Source**: Insurance application forms
**Extracted Data**:
- Applicant personal information
- Vehicle details and VIN numbers
- Coverage preferences
- Policy information
- Claims and conviction history

## Data Extraction Process

### Quote Extractor (`quote_extractor.py`)
- **Date Format**: MM/DD/YYYY
- **Key Functions**:
  - Extract driver information from quote tables
  - Parse license progression dates (G1, G2, G)
  - Identify declared convictions and claims
  - Extract vehicle and coverage details
  - Parse policy terms and premium information

### MVR Extractor (`mvr_extractor.py`)
- **Date Format**: DD/MM/YYYY
- **Key Functions**:
  - Extract driver identification information
  - Parse license dates and class information
  - Extract all convictions with dates and descriptions
  - Parse current address information
  - Handle various MVR report formats

### DASH Extractor (`dash_extractor.py`)
- **Date Format**: YYYY/MM/DD
- **Key Functions**:
  - Extract complete policy history
  - Parse claim information with at-fault status
  - Identify policy gaps and cancellation reasons
  - Extract driver information from insurance records
  - Handle policy start/end dates

### Application Extractor (`application_extractor.py`)
- **Key Functions**:
  - Extract applicant personal information
  - Parse vehicle details and VIN numbers
  - Extract coverage preferences
  - Parse policy information
  - Handle various application form formats

## Validation Engine (`compare_engine.py`)

### Core Validation Logic

#### 1. Driver Matching
- **Primary Key**: Full name + Driver's License Number
- **Fuzzy Name Matching**: Handles name variations:
  - Different name orders ("John Smith" vs "SMITH, JOHN")
  - Middle initial vs full middle name ("John F Smith" vs "John Frank Smith")
  - Case variations and comma separations
- **License Number Normalization**: Removes dashes and spaces for comparison

#### 2. MVR Validation Rules

**License Progression Calculation**:
```
If birth date and expiry date have same day/month:
  G1 = issue date
  G2 = G1 + 1 year
  G = G2 + 1 year

If birth date and expiry date do not match:
  G1 = expiry date - 5 years
  G2 = G1 + 1 year
  G = G2 + 1 year
```

**Validation Checks**:
- Compare calculated G1, G2, G dates with quote declarations
- If license class is G2 ‚Üí skip G date comparison
- Check if all MVR convictions are declared in quote
- Any missing conviction ‚Üí Critical Fail

#### 3. DASH Validation Rules

**Insurance History Validation**:
- Find first insurance policy ever held
- Compare start date with quote's "date_insured"
- Any mismatch ‚Üí Fail

**Policy Gap Detection**:
- Identify gaps between policy end and next policy start
- Extract cancellation/expiry reasons
- Report gaps with reasons (e.g., "Cancelled - insured's request")

**Claims Validation**:
- If at-fault > 0 and driver matches:
  - Check if claim is declared in quote
  - Missing claim ‚Üí Critical Fail
- If at-fault = 0 ‚Üí skip validation

#### 4. Quote Validation Rules
- Normalize all dates to standard format
- Match each driver to corresponding MVR and DASH
- Compare all extracted data against declarations
- Any missing information = Fail
- Any missing conviction or at-fault claim = Critical Fail

### Date Normalization
- **MVR Dates**: DD/MM/YYYY ‚Üí YYYY-MM-DD
- **Quote Dates**: MM/DD/YYYY ‚Üí YYYY-MM-DD
- **DASH Dates**: YYYY/MM/DD ‚Üí YYYY-MM-DD

## Frontend Features

### 1. Professional Dashboard
- **Company Branding**: "Vieira Insurance Quality Control System"
- **Side Navigation**: Dashboard, File Upload, Validation Reports, Application QC
- **Modern UI**: Professional design with gradients, shadows, and responsive layout

### 2. Unified File Upload
- **Single Upload Area**: Drag-and-drop interface for all document types
- **Automatic Detection**: System identifies document types automatically
- **Multi-File Support**: Handle multiple MVR and DASH files for different drivers
- **Real-time Feedback**: Shows detected file types and upload status

### 3. Validation Reports
- **Per-Driver Results**: Separate sections for each driver
- **Status Indicators**: Pass (‚úÖ), Warning (‚ö†Ô∏è), Critical Fail (üü•)
- **Detailed Comparisons**: Shows actual values being compared
- **Match Percentages**: 0-100% scores for each validation category
- **Professional PDF Export**: High-quality downloadable reports

### 4. Application QC (New Feature)
- **PDF Upload**: Upload insurance application forms
- **Data Extraction**: Automatic extraction of application data
- **JSON Export**: Download extracted data as structured JSON
- **Data Preview**: View extracted information before download

## Business Rules and Validation Logic

### Critical Fail Conditions
1. **Missing Convictions**: Any conviction in MVR not declared in quote
2. **Missing Claims**: Any at-fault claim in DASH not declared in quote
3. **Driver Mismatch**: Unable to match driver across documents
4. **License Progression Errors**: Significant discrepancies in G1/G2/G dates

### Warning Conditions
1. **Minor Date Discrepancies**: Small differences in license dates
2. **Address Variations**: Minor differences in address formatting
3. **Name Variations**: Slight differences in name formatting

### Pass Conditions
1. **Exact Matches**: All data matches perfectly
2. **No Claims**: DASH shows no claims (automatic pass)
3. **Fuzzy Matches**: Names match using fuzzy logic
4. **Date Tolerance**: Dates within acceptable range

## Example Validation Scenario

### Driver: Yang Palmo
**Documents**:
- Quote: Auto Quote 2025-05-22
- MVR: MVR_ON_P0311-78928-76026.pdf
- DASH: DASH report for Yang Palmo

**MVR Data**:
- DLN: P0311-78928-76026
- Birthdate: 26/10/1987
- Issue date: 06/03/2008
- Expiry date: 26/10/2029
- License class: G
- Conviction: Speeding on 06/08/2024

**Calculated License Progression**:
- G1 = 06/03/2008
- G2 = 06/03/2009
- G = 06/03/2010

**Quote Declarations**:
- G1 = 03/06/2008 ‚Üí Close match (Pass)
- G2 = 05/05/2009 ‚Üí Incorrect (Warning)
- G = 10/04/2010 ‚Üí Incorrect (Warning)
- Convictions: None declared ‚Üí Missing speeding conviction (Critical Fail)

**DASH Data**:
- First policy: 2015-09-04
- Quote date_insured: 09/04/2010 ‚Üí Mismatch (Fail)
- Gap detected: 2025-01-11 to 2025-05-23
- Reason: "Cancelled - insured's request"
- At-fault claim: 2024-12-08 ‚Üí Not declared in quote (Critical Fail)

## Technical Implementation Details

### Error Handling
- **File Upload Errors**: Invalid file types, corrupted PDFs
- **Extraction Errors**: Unreadable text, missing data
- **Validation Errors**: Data mismatches, missing documents
- **System Errors**: Network issues, processing failures

### Performance Optimization
- **PDF Processing**: Efficient text extraction using PyMuPDF
- **Memory Management**: Cleanup of temporary files
- **Response Time**: Optimized validation algorithms
- **File Size**: Compressed PDF reports (10-25MB target)

### Security Considerations
- **File Validation**: PDF file type verification
- **Data Sanitization**: Input validation and cleaning
- **Temporary Storage**: Secure file handling
- **Error Logging**: Comprehensive error tracking

## Future Enhancements

### Planned Features
1. **Batch Processing**: Handle multiple policies simultaneously
2. **API Integration**: Connect with insurance company databases
3. **Machine Learning**: Improve extraction accuracy with AI
4. **Real-time Validation**: Instant feedback during quote creation
5. **Audit Trail**: Complete history of all validations
6. **Custom Rules**: Configurable validation rules per company

### Scalability Considerations
- **Database Integration**: Store validation history
- **User Management**: Multi-user access with roles
- **Cloud Deployment**: AWS/Azure hosting options
- **API Versioning**: Backward compatibility
- **Performance Monitoring**: Real-time system metrics

## Usage Instructions

### For Insurance Brokers
1. **Prepare Documents**: Ensure all required PDFs are available
2. **Upload Files**: Use the unified upload interface
3. **Review Results**: Check validation report for any issues
4. **Download Report**: Generate professional PDF for records
5. **Address Issues**: Fix any critical failures before submitting

### For Quality Control Teams
1. **Monitor Validations**: Track validation results across brokers
2. **Generate Reports**: Create summary reports for management
3. **Identify Trends**: Spot common issues and training needs
4. **Maintain Standards**: Ensure consistent quality across team

## Support and Maintenance

### Troubleshooting
- **Common Issues**: File upload problems, extraction errors
- **Error Messages**: Clear, actionable error descriptions
- **Log Files**: Detailed system logs for debugging
- **User Guide**: Comprehensive documentation

### Updates and Maintenance
- **Regular Updates**: Monthly feature and security updates
- **Backup Procedures**: Automated data backup
- **Performance Monitoring**: Continuous system monitoring
- **User Training**: Regular training sessions for new features

This comprehensive documentation provides a complete understanding of the Vieira Insurance Quality Control System, enabling any AI or developer to work with the application without requiring additional context or explanation.

